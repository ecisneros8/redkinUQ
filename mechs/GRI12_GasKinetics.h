#ifndef MECH_GASKINETICS
#define MECH_GASKINETICS

#include <cmath>
#include <vector>
#include <iostream>
#include "GasThermo.h"
#include "mech_defs.h"
#include <cppad/cppad.hpp>

using namespace std;

using std::vector;
using CppAD::AD;
using CppAD::Value;
using CppAD::Var2Par;

namespace mech
{

  class GasKinetics
  {
  public:

    // Constructor
  GasKinetics() :
      m_nrev(177),
      m_nirrev(0),
      m_nfall(20),
      m_ntbrxn(7)
	{
	  a_z.resize(m_kk);
	  a_fz.resize(m_kk);
	}

      /*
       * Non-templated routines:
       * These routines are inteded to be either for computational 
       * (e.g. getJacobian) or for informational purposes.
       */

      // Add thermo pointer
      void addThermo(GasThermo* thermo);

      // Source
      void getSource(vector<double>& z, vector<double>& fz);

      // Jacobian
      void getJacobian(vector<double>& z, vector<double>& dfz);

      GasThermo& thermo();

      // Informational routines
      int nReactions();
      int nReversibleReactions();
      int nIrreversibleReactions();
      int nThreeBodyReactions();

      /*
       * Templated routines:
       * Species rate laws have been hardcoded to
       * aid in the computation of the Jacobian through
       * Automatic Differentiation package CppAD.
       */
      
      // Rates of progress
      template <class Type>
	void updateRateConstants(Type& T, vector<Type>& c,
				 vector<Type>& kfwd, vector<Type> & krev);

      // Falloff rates
      template <class Type>
	void getFalloffRates(Type& T, vector<Type>& C, vector<Type>& kfwd);
      
      // Net production rates
      template <class Type>
	void getNetProductionRates(Type& T, vector<Type>& z, vector<Type>& fz);
      
      /*
       * Member variables
       */
      int m_nrev;
      int m_nirrev;
      int m_ntbrxn;
      int m_nfall;
      
  protected:
      GasThermo*           m_thermo;
      vector< AD<double> > a_z;
      vector< AD<double> > a_fz;
  };

  /*
   * Non-templated routines:
   * These routines are inteded to be either for computational 
   * (e.g. getJacobian) or for informational purposes.
   */

  void GasKinetics::addThermo(GasThermo* thermo) {

    m_thermo = thermo;
    
  };

  void GasKinetics::getSource(vector<double>& z, vector<double>& fz) {

    double T;
    thermo().getTemperature(z, T);
    getNetProductionRates(T, z, fz);
    
  }
  
  void GasKinetics::getJacobian(vector<double>& z, vector<double>& dfz) {

    copy(z.begin(), z.end(), a_z.begin());

    /* AD Stuff */
    CppAD::Independent(a_z);
    AD<double> a_T;
    thermo().getTemperature(a_z, a_T);
    getNetProductionRates(a_T, a_z, a_fz);
    CppAD::ADFun<double> tapef(a_z, a_fz);

    dfz = tapef.Jacobian(z);
    
  };

  GasThermo& GasKinetics::thermo() {
    return *m_thermo;
  };

  int GasKinetics::nReactions() {
    return m_ii;
  };

  int GasKinetics::nReversibleReactions() {
    return m_nrev;
  };

  int GasKinetics::nIrreversibleReactions() {
    return m_nirrev;
  };

  int GasKinetics::nThreeBodyReactions() {
    return m_ntbrxn;
  };

  /*
   * Templated routines:
   * Species rate laws have been hardcoded to
   * aid in the computation of the Jacobian through
   * Automatic Differentiation package CppAD.
   */
  
  template <class Type>
    void GasKinetics::updateRateConstants(Type& T, vector<Type>& C,
			     vector<Type>& kfwd, vector<Type>& krev) {
    
    Type         tlog = log(T);
    Type         rt   = 1.0 / T;
    vector<Type> keqs(m_ii, 0.0);
    
    thermo().getEquilibriumConstants(T, keqs);
    
    kfwd[0] =  exp(2.551075757973e+01 + -1.0000e+00 * tlog);
    kfwd[1] =  exp(2.693787393537e+01 + -1.0000e+00 * tlog);
    kfwd[2] =  exp(3.912023005428e+00 + 2.6700e+00 * tlog - 3.165251062964133e+03 * rt);
    kfwd[3] =  exp(2.371899811050e+01);
    kfwd[4] =  exp(9.172638504792e+00 + 2.0000e+00 * tlog - 2.012878259436651e+03 * rt);
    kfwd[5] =  exp(2.476631710478e+01);
    kfwd[6] =  exp(2.510529247162e+01);
    kfwd[7] =  exp(2.343131603805e+01);
    kfwd[8] =  exp(2.343131603805e+01);
    kfwd[9] =  exp(2.515764770195e+01);
    kfwd[10] =  exp(1.383531318526e+01 + 1.5000e+00 * tlog - 4.327688257788799e+03 * rt);
    kfwd[11] =  exp(2.021576800327e+01 - 1.509658694577488e+03 * rt);
    kfwd[12] =  exp(2.412446321861e+01);
    kfwd[13] =  exp(2.412446321861e+01);
    kfwd[14] =  exp(2.438682748308e+01 - 1.781397259601436e+03 * rt);
    kfwd[15] =  exp(2.302585092994e+01);
    kfwd[16] =  exp(2.302585092994e+01);
    kfwd[17] =  exp(5.961005339623e+00 + 2.5000e+00 * tlog - 1.559980651063404e+03 * rt);
    kfwd[18] =  exp(4.867534450456e+00 + 2.5000e+00 * tlog - 2.516097824295813e+03 * rt);
    kfwd[19] =  exp(2.463528884237e+01);
    kfwd[20] =  exp(9.230142999272e+00 + 2.0000e+00 * tlog - 9.561171732324091e+02 * rt);
    kfwd[21] =  exp(3.836741779140e+01 + -1.4100e+00 * tlog - 1.456820640267276e+04 * rt);
    kfwd[22] =  exp(9.230142999272e+00 + 2.0000e+00 * tlog - 9.561171732324091e+02 * rt);
    kfwd[23] =  exp(2.412446321861e+01);
    kfwd[24] =  exp(9.862665558016e+00 + 1.8300e+00 * tlog - 1.107083042690158e+02 * rt);
    kfwd[25] =  exp(2.560606775953e+01);
    kfwd[26] =  exp(1.140534025429e+01 + 1.9200e+00 * tlog - 2.863319324048635e+03 * rt);
    kfwd[27] =  exp(2.532843602293e+01);
    kfwd[28] =  exp(2.302585092994e+01 - 4.025756518873301e+03 * rt);
    kfwd[29] =  exp(2.128288162488e+01 - 6.793464125598696e+02 * rt);
    kfwd[30] =  exp(2.163955656882e+01 - 2.405389520026798e+04 * rt);
    kfwd[31] =  exp(2.532843602293e+01 - 2.012878259436650e+04 * rt);
    kfwd[32] =  exp(2.866064053311e+01 + -8.6000e-01 * tlog);
    kfwd[33] =  exp(3.333480359058e+01 + -1.7200e+00 * tlog);
    kfwd[34] =  exp(2.986960087895e+01 + -7.6000e-01 * tlog);
    kfwd[35] =  exp(3.355794714190e+01 + -1.7200e+00 * tlog);
    kfwd[36] =  exp(2.727434617199e+01 + -8.0000e-01 * tlog);
    kfwd[37] =  exp(2.514210644474e+01 - 7.252903588315111e+03 * rt);
    kfwd[38] =  exp(2.763102111593e+01 + -1.0000e+00 * tlog);
    kfwd[39] =  exp(2.522307550728e+01 + -6.0000e-01 * tlog);
    kfwd[40] =  exp(3.172536567815e+01 + -1.2500e+00 * tlog);
    kfwd[41] =  exp(3.394093939416e+01 + -2.0000e+00 * tlog);
    kfwd[42] =  exp(3.762981884827e+01 + -2.0000e+00 * tlog);
    kfwd[43] =  exp(2.210203193165e+01 - 3.376603280204981e+02 * rt);
    kfwd[44] =  exp(2.405547034712e+01 - 5.374384952695857e+02 * rt);
    kfwd[45] =  exp(2.562110563690e+01 - 3.195444236855683e+02 * rt);
    kfwd[46] =  exp(9.400960731585e+00 + 2.0000e+00 * tlog - 2.616741737267646e+03 * rt);
    kfwd[47] =  exp(2.302585092994e+01 - 1.811590433492986e+03 * rt);
    kfwd[48] =  exp(2.542374620274e+01);
    kfwd[50] =  exp(2.412446321861e+01);
    kfwd[52] =  exp(1.339999511400e+01 + 1.6200e+00 * tlog - 5.454900083073323e+03 * rt);
    kfwd[54] =  exp(2.501918977257e+01);
    kfwd[57] =  exp(1.695100477389e+01 + 1.0500e+00 * tlog - 1.648044074913758e+03 * rt);
    kfwd[59] =  exp(2.371899811050e+01);
    kfwd[60] =  exp(2.320817248673e+01);
    kfwd[61] =  exp(2.251502530617e+01);
    kfwd[63] =  exp(8.131530710604e+00 + 1.6000e+00 * tlog);
    kfwd[64] =  exp(2.371899811050e+01);
    kfwd[65] =  exp(2.418900173975e+01);
    kfwd[66] =  exp(2.349585455919e+01);
    kfwd[67] =  exp(9.740968623038e+00 + 2.1000e+00 * tlog - 2.450679280864122e+03 * rt);
    kfwd[68] =  exp(8.342839804271e+00 + 2.1000e+00 * tlog - 2.450679280864122e+03 * rt);
    kfwd[72] =  exp(2.412446321861e+01);
    kfwd[74] =  exp(7.189167738420e+00 + 2.5300e+00 * tlog - 6.159407473876151e+03 * rt);
    kfwd[76] =  exp(2.141641301751e+01);
    kfwd[77] =  exp(1.165268740735e+01 + 1.9000e+00 * tlog - 3.789243323389495e+03 * rt);
    kfwd[78] =  exp(2.532843602293e+01);
    kfwd[79] =  exp(2.463528884237e+01 - 4.025756518873301e+03 * rt);
    kfwd[80] =  exp(2.314806856266e+01 - 1.725036668337209e+03 * rt);
    kfwd[81] =  exp(2.302585092994e+01);
    kfwd[83] =  exp(1.228303368667e+01 + 1.5100e+00 * tlog - 1.726043107466928e+03 * rt);
    kfwd[85] =  exp(3.575150688786e+00 + 2.4000e+00 * tlog - -1.061793281852833e+03 * rt);
    kfwd[86] =  exp(2.409056166693e+01 - -2.516097824295813e+02 * rt);
    kfwd[87] =  exp(2.128288162488e+01 - 1.610302607549320e+02 * rt);
    kfwd[88] =  exp(2.708629394049e+01 - 4.810779040053595e+03 * rt);
    kfwd[89] =  exp(2.463528884237e+01);
    kfwd[90] =  exp(2.412446321861e+01);
    kfwd[91] =  exp(2.371899811050e+01);
    kfwd[92] =  exp(9.332558004700e+00 + 2.0000e+00 * tlog - 1.509658694577488e+03 * rt);
    kfwd[93] =  exp(2.412446321861e+01);
    kfwd[95] =  exp(1.093310696972e+01 + 1.6000e+00 * tlog - 2.727450041536662e+03 * rt);
    kfwd[96] =  exp(2.394254158184e+01);
    kfwd[97] =  exp(1.151292546497e+01 + 1.6000e+00 * tlog - 1.570045042360588e+03 * rt);
    kfwd[98] =  exp(1.077058804022e+01 + 1.2280e+00 * tlog - 3.522536954014139e+01 * rt);
    kfwd[99] =  exp(2.463528884237e+01);
    kfwd[100] =  exp(1.504807081914e+01 + 1.1800e+00 * tlog - -2.249391454920457e+02 * rt);
    kfwd[101] =  exp(2.233270374938e+01);
    kfwd[102] =  exp(2.233270374938e+01);
    kfwd[103] =  exp(7.272398392570e+00 + 2.0000e+00 * tlog - -4.227044344816966e+02 * rt);
    kfwd[104] =  exp(8.748304912380e+00 + 2.0000e+00 * tlog - 7.548293472887440e+02 * rt);
    kfwd[105] =  exp(2.371899811050e+01);
    kfwd[106] =  exp(-1.533877077416e+01 + 4.5000e+00 * tlog - -5.032195648591626e+02 * rt);
    kfwd[107] =  exp(6.222576268071e+00 + 2.3000e+00 * tlog - 6.793464125598695e+03 * rt);
    kfwd[108] =  exp(1.042525311634e+01 + 2.0000e+00 * tlog - 7.045073908028277e+03 * rt);
    kfwd[109] =  exp(-1.454324918329e+01 + 4.0000e+00 * tlog - -1.006439129718325e+03 * rt);
    kfwd[110] =  exp(2.233270374938e+01);
    kfwd[111] =  exp(8.188689124444e+00 + 2.0000e+00 * tlog - 1.258048912147907e+03 * rt);
    kfwd[112] =  exp(8.171882006128e+00 + 2.1200e+00 * tlog - 4.378010214274715e+02 * rt);
    kfwd[113] =  exp(2.273816885749e+01 - 1.006439129718325e+03 * rt);
    kfwd[114] =  exp(1.868304500842e+01 - -8.202478907204351e+02 * rt);
    kfwd[115] =  exp(2.676352054822e+01 - 6.038634778309952e+03 * rt);
    kfwd[116] =  exp(2.371899811050e+01);
    kfwd[117] =  exp(2.072326583695e+01);
    kfwd[118] =  exp(2.371899811050e+01);
    kfwd[119] =  exp(2.573390113104e+01 - 1.187598173067624e+04 * rt);
    kfwd[120] =  exp(2.072326583695e+01 - 4.025756518873301e+03 * rt);
    kfwd[121] =  exp(2.478370884749e+01 - 2.898544693588777e+02 * rt);
    kfwd[122] =  exp(2.463528884237e+01);
    kfwd[123] =  exp(2.463528884237e+01);
    kfwd[124] =  exp(2.421977339841e+01);
    kfwd[125] =  exp(1.161457911870e+01 + 1.7900e+00 * tlog - 8.403766733148017e+02 * rt);
    kfwd[126] =  exp(2.246548486061e+01 - -3.799307714686678e+02 * rt);
    kfwd[127] =  exp(2.441214529106e+01);
    kfwd[128] =  exp(2.412446321861e+01);
    kfwd[129] =  exp(2.481761039917e+01);
    kfwd[131] =  exp(2.194704126857e+01 - 3.472214997528222e+02 * rt);
    kfwd[132] =  exp(2.527292331300e+01 - -2.591580759024687e+02 * rt);
    kfwd[133] =  exp(2.463528884237e+01);
    kfwd[134] =  exp(2.330348266654e+01 - 7.548293472887440e+02 * rt);
    kfwd[135] =  exp(6.214608098422e+00 + 2.0000e+00 * tlog - 3.638277453931746e+03 * rt);
    kfwd[136] =  exp(2.418900173975e+01);
    kfwd[137] =  exp(2.441214529106e+01);
    kfwd[138] =  exp(7.807916628926e+00 + 2.0000e+00 * tlog - 4.161625801385275e+03 * rt);
    kfwd[140] =  exp(2.412446321861e+01);
    kfwd[141] =  exp(2.343131603805e+01 - 3.019317389154976e+02 * rt);
    kfwd[142] =  exp(2.292049041428e+01 - 3.019317389154976e+02 * rt);
    kfwd[143] =  exp(2.405547034712e+01);
    kfwd[144] =  exp(2.320817248673e+01);
    kfwd[145] =  exp(2.497176107900e+01);
    kfwd[147] =  exp(2.412446321861e+01);
    kfwd[148] =  exp(2.320817248673e+01 - -2.868351519697227e+02 * rt);
    kfwd[149] =  exp(2.349585455919e+01 - -2.868351519697227e+02 * rt);
    kfwd[150] =  exp(2.292049041428e+01);
    kfwd[151] =  exp(2.266917598600e+01);
    kfwd[152] =  exp(2.336232316656e+01);
    kfwd[153] =  exp(2.441214529106e+01 - -2.767707606725394e+02 * rt);
    kfwd[154] =  exp(2.400980031029e+01 - 1.449272346794388e+04 * rt);
    kfwd[155] =  exp(1.739902949642e+01 - 4.498782909840914e+03 * rt);
    kfwd[156] =  exp(3.198673117551e+00 + 2.4700e+00 * tlog - 2.606677345970463e+03 * rt);
    kfwd[158] =  exp(2.233070174671e+01 + 1.0000e-01 * tlog - 5.334127387507124e+03 * rt);
    kfwd[159] =  exp(2.399965556802e+01);
    kfwd[160] =  exp(1.199964782928e+00 + 2.8100e+00 * tlog - 2.948866650074693e+03 * rt);
    kfwd[161] =  exp(1.030895266064e+01 + 1.5000e+00 * tlog - 5.002002474700077e+03 * rt);
    kfwd[162] =  exp(9.210340371976e+00 + 1.5000e+00 * tlog - 5.002002474700077e+03 * rt);
    kfwd[163] =  exp(5.424950017481e+00 + 2.0000e+00 * tlog - 4.629619996704297e+03 * rt);
    kfwd[164] =  exp(8.722580021141e+00 + 1.7400e+00 * tlog - 5.258644452778250e+03 * rt);
    kfwd[165] =  exp(3.534703638257e+01 + -1.0000e+00 * tlog - 8.554732602605765e+03 * rt);
    kfwd[166] =  exp(3.286212973278e+01 + -1.0000e+00 * tlog - 8.554732602605765e+03 * rt);
    kfwd[167] =  exp(2.275141408424e+01 - 2.012878259436651e+02 * rt);
    kfwd[168] =  exp(2.361363759484e+01 - 4.528976083732464e+02 * rt);
    kfwd[169] =  exp(-3.538740847831e+01 + 7.6000e+00 * tlog - -1.776365063952844e+03 * rt);
    kfwd[170] =  exp(2.463528884237e+01 - 7.548293472887440e+02 * rt);
    kfwd[171] =  exp(6.008813185443e+00 + 2.4000e+00 * tlog - 1.006439129718325e+02 * rt);
    kfwd[172] =  exp(2.210454765624e+01 - -1.207726955661990e+02 * rt);
    kfwd[174] =  exp(2.054891244980e+01 - 1.949975813829255e+03 * rt);
    kfwd[175] =  exp(2.119326946619e+01 - 4.297495083897249e+02 * rt);
    kfwd[176] =  exp(2.302585092994e+01);

    getFalloffRates(T, C, kfwd);

    kfwd[0] = (2.4e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 1.5e+01 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.8e+00 * C[14] + 3.6e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 8.3e-01 * C[31]) * kfwd[0];
    kfwd[1] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * kfwd[1];
    kfwd[11] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 6.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 3.5e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 5.0e-01 * C[31]) * kfwd[11];
    kfwd[32] = (1.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 0.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 1.0e+00 * C[13] + 7.5e-01 * C[14] + 1.5e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 1.5e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 0.0e+00 * C[30] + 0.0e+00 * C[31]) * kfwd[32];
    kfwd[38] = (0.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 0.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.0e+00 * C[14] + 0.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 6.3e-01 * C[31]) * kfwd[38];
    kfwd[42] = (7.3e-01 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 3.6e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.0e+00 * C[14] + 1.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 3.8e-01 * C[31]) * kfwd[42];
    kfwd[166] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 0.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 3.8e-01 * C[31]) * kfwd[166];

    for(int i = 0; i < m_ii; ++i) { krev[i] = kfwd[i] * keqs[i]; }
    
  };

  template<class Type>
    void GasKinetics::getFalloffRates(Type& T, vector<Type>& C, vector<Type>& kfwd) {

    Type         tlog = log(T);
    Type         rt   = 1.0 / T;
    Type         lpr;
    Type         cc;
    Type         nn;
    Type         f1;
    Type         lgf;
    vector<Type> pr(m_nfall,   0.0);
    vector<Type> khi(m_nfall,  0.0);
    vector<Type> klo(m_nfall,  0.0);
    vector<Type> work(m_nfall, 0.0);
    
    khi[0] =  exp(3.084989694080e+01 + -8.0000e-01 * tlog);
    khi[1] =  exp(3.017262310939e+01 + -6.3000e-01 * tlog - 1.927330933410593e+02 * rt);
    khi[2] =  exp(2.080944353319e+01 + 4.8000e-01 * tlog - -1.308370868633823e+02 * rt);
    khi[3] =  exp(2.010707969752e+01 + 4.5400e-01 * tlog - 1.811590433492986e+03 * rt);
    khi[4] =  exp(2.010707969752e+01 + 4.5400e-01 * tlog - 1.308370868633823e+03 * rt);
    khi[5] =  exp(2.361363759484e+01);
    khi[6] =  exp(2.463528884237e+01);
    khi[7] =  exp(3.223619130192e+01 + -1.0000e+00 * tlog);
    khi[8] =  exp(2.244603243469e+01 - 1.207726955661990e+03 * rt);
    khi[9] =  exp(2.252827053292e+01 + 2.7000e-01 * tlog - 1.409014781605655e+02 * rt);
    khi[10] =  exp(2.080022687808e+01 + 4.5400e-01 * tlog - 9.158596080436761e+02 * rt);
    khi[11] =  exp(3.388677115768e+01 + -9.9000e-01 * tlog - 7.950869124774770e+02 * rt);
    khi[12] =  exp(1.066895539468e+01 + 1.5000e+00 * tlog - 4.005627736278935e+04 * rt);
    khi[13] =  exp(2.502733093015e+01 + -3.7000e-01 * tlog);
    khi[14] =  exp(2.486640056334e+01);
    khi[15] =  exp(2.463528884237e+01);
    khi[16] =  exp(2.051254480563e+01 + 5.0000e-01 * tlog - 2.269520237514824e+03 * rt);
    khi[17] =  exp(2.371899811050e+01);
    khi[18] =  exp(3.068502229761e+01 + -9.7000e-01 * tlog - 3.119961302126808e+02 * rt);
    khi[19] =  exp(2.971046265761e+01 + 4.4000e-01 * tlog - 4.467080077254787e+04 * rt);

    klo[0] =  exp(4.951743776268e+01 + -3.1400e+00 * tlog - 6.189600647767701e+02 * rt);
    klo[1] =  exp(6.307684566135e+01 + -4.7600e+00 * tlog - 1.227855738256357e+03 * rt);
    klo[2] =  exp(4.174663626634e+01 + -2.5700e+00 * tlog - 7.170878799243068e+02 * rt);
    klo[3] =  exp(6.010622931832e+01 + -4.8200e+00 * tlog - 3.286023758530332e+03 * rt);
    klo[4] =  exp(5.605049959222e+01 + -4.8000e+00 * tlog - 2.797900780616944e+03 * rt);
    klo[5] =  exp(5.866323961352e+01 + -4.8000e+00 * tlog - 1.660624564035237e+03 * rt);
    klo[6] =  exp(5.280863424913e+01 + -4.0000e+00 * tlog - 1.522239183698967e+03 * rt);
    klo[7] =  exp(6.349155335082e+01 + -4.8000e+00 * tlog - 9.561171732324091e+02 * rt);
    klo[8] =  exp(7.962289422853e+01 + -7.2700e+00 * tlog - 3.633245258283154e+03 * rt);
    klo[9] =  exp(5.559851446848e+01 + -3.8600e+00 * tlog - 1.670688955332420e+03 * rt);
    klo[10] =  exp(8.307538490458e+01 + -7.6200e+00 * tlog - 3.507440367068364e+03 * rt);
    klo[11] =  exp(8.127861289353e+01 + -7.0800e+00 * tlog - 3.364022791083502e+03 * rt);
    klo[12] =  exp(4.997762777048e+01 + -3.4200e+00 * tlog - 4.244657029587037e+04 * rt);
    klo[13] =  exp(2.846393023886e+01 + -9.0000e-01 * tlog - -8.554732602605765e+02 * rt);
    klo[14] =  exp(7.467597474882e+01 + -6.3000e+00 * tlog - 1.559980651063404e+03 * rt);
    klo[15] =  exp(5.164641323948e+01 + -3.7400e+00 * tlog - 9.742330775673389e+02 * rt);
    klo[16] =  exp(6.315933870445e+01 + -5.1100e+00 * tlog - 3.570342812675759e+03 * rt);
    klo[17] =  exp(7.467597474882e+01 + -6.3000e+00 * tlog - 1.559980651063404e+03 * rt);
    klo[18] =  exp(1.018847236383e+02 + -9.6700e+00 * tlog - 3.130025693423991e+03 * rt);
    klo[19] =  exp(1.101674095198e+02 + -9.3100e+00 * tlog - 5.025150574683598e+04 * rt);

    pr[0] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[0] / khi[0];
    pr[1] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[1] / khi[1];
    pr[2] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[2] / khi[2];
    pr[3] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[3] / khi[3];
    pr[4] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[4] / khi[4];
    pr[5] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[5] / khi[5];
    pr[6] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[6] / khi[6];
    pr[7] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[7] / khi[7];
    pr[8] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[8] / khi[8];
    pr[9] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[9] / khi[9];
    pr[10] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[10] / khi[10];
    pr[11] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[11] / khi[11];
    pr[12] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[12] / khi[12];
    pr[13] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[13] / khi[13];
    pr[14] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[14] / khi[14];
    pr[15] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[15] / khi[15];
    pr[16] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[16] / khi[16];
    pr[17] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[17] / khi[17];
    pr[18] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[18] / khi[18];
    pr[19] = (2.0e+00 * C[0] + 1.0e+00 * C[1] + 1.0e+00 * C[2] + 1.0e+00 * C[3] + 1.0e+00 * C[4] + 6.0e+00 * C[5] + 1.0e+00 * C[6] + 1.0e+00 * C[7] + 1.0e+00 * C[8] + 1.0e+00 * C[9] + 1.0e+00 * C[10] + 1.0e+00 * C[11] + 1.0e+00 * C[12] + 2.0e+00 * C[13] + 1.5e+00 * C[14] + 2.0e+00 * C[15] + 1.0e+00 * C[16] + 1.0e+00 * C[17] + 1.0e+00 * C[18] + 1.0e+00 * C[19] + 1.0e+00 * C[20] + 1.0e+00 * C[21] + 1.0e+00 * C[22] + 1.0e+00 * C[23] + 1.0e+00 * C[24] + 1.0e+00 * C[25] + 3.0e+00 * C[26] + 1.0e+00 * C[27] + 1.0e+00 * C[28] + 1.0e+00 * C[29] + 1.0e+00 * C[30] + 7.0e-01 * C[31]) * klo[19] / khi[19];

    work[0] =  (1.0 - 6.8000e-01) * exp(-T * 1.2821e-02) + 6.8000e-01 * exp(-T * 5.0125e-04) + exp(-5.5900e+03/ T);
    work[1] =  (1.0 - 7.8300e-01) * exp(-T * 1.3514e-02) + 7.8300e-01 * exp(-T * 3.4002e-04) + exp(-6.9640e+03/ T);
    work[2] =  (1.0 - 7.8240e-01) * exp(-T * 3.6900e-03) + 7.8240e-01 * exp(-T * 3.6298e-04) + exp(-6.5700e+03/ T);
    work[3] =  (1.0 - 7.1870e-01) * exp(-T * 9.7087e-03) + 7.1870e-01 * exp(-T * 7.7459e-04) + exp(-4.1600e+03/ T);
    work[4] =  (1.0 - 7.5800e-01) * exp(-T * 1.0638e-02) + 7.5800e-01 * exp(-T * 6.4309e-04) + exp(-4.2000e+03/ T);
    work[5] =  (1.0 - 7.6790e-01) * exp(-T * 2.9586e-03) + 7.6790e-01 * exp(-T * 5.5188e-04) + exp(-5.0810e+03/ T);
    work[6] =  (1.0 - 8.9020e-01) * exp(-T * 6.9444e-03) + 8.9020e-01 * exp(-T * 3.5236e-04) + exp(-4.5569e+04/ T);
    work[7] =  (1.0 - 6.4640e-01) * exp(-T * 7.5758e-03) + 6.4640e-01 * exp(-T * 7.6046e-04) + exp(-5.5660e+03/ T);
    work[8] =  (1.0 - 7.5070e-01) * exp(-T * 1.0152e-02) + 7.5070e-01 * exp(-T * 7.6805e-04) + exp(-4.1670e+03/ T);
    work[9] =  (1.0 - 7.8200e-01) * exp(-T * 4.8193e-03) + 7.8200e-01 * exp(-T * 3.7552e-04) + exp(-6.0950e+03/ T);
    work[10] =  (1.0 - 9.7530e-01) * exp(-T * 4.7619e-03) + 9.7530e-01 * exp(-T * 1.0163e-03) + exp(-4.3740e+03/ T);
    work[11] =  (1.0 - 8.4220e-01) * exp(-T * 8.0000e-03) + 8.4220e-01 * exp(-T * 4.5065e-04) + exp(-6.8820e+03/ T);
    work[12] =  (1.0 - 9.3200e-01) * exp(-T * 5.0761e-03) + 9.3200e-01 * exp(-T * 6.4935e-04) + exp(-1.0300e+04/ T);
    work[13] =  (1.0 - 7.3460e-01) * exp(-T * 1.0638e-02) + 7.3460e-01 * exp(-T * 5.6948e-04) + exp(-5.1820e+03/ T);
    work[14] =  (1.0 - 2.1050e-01) * exp(-T * 1.1976e-02) + 2.1050e-01 * exp(-T * 1.8525e-04) + exp(-8.3700e+03/ T);
    work[15] =  (1.0 - 5.7570e-01) * exp(-T * 4.2194e-03) + 5.7570e-01 * exp(-T * 6.0533e-04) + exp(-5.0690e+03/ T);
    work[16] =  (1.0 - 5.9070e-01) * exp(-T * 3.6364e-03) + 5.9070e-01 * exp(-T * 8.1566e-04) + exp(-5.1850e+03/ T);
    work[17] =  (1.0 - 1.5070e-01) * exp(-T * 7.4627e-03) + 1.5070e-01 * exp(-T * 4.1964e-04) + exp(-7.2650e+03/ T);
    work[18] =  (1.0 - 5.3250e-01) * exp(-T * 6.6225e-03) + 5.3250e-01 * exp(-T * 9.6339e-04) + exp(-4.9700e+03/ T);
    work[19] =  (1.0 - 7.3450e-01) * exp(-T * 5.5556e-03) + 7.3450e-01 * exp(-T * 9.6618e-04) + exp(-5.4170e+03/ T);

    for(int r = 0; r < m_nfall; ++r) {
      lpr     =  log10(pr[r]);
      cc      = -0.40 - 0.67 * log10(work[r]);
      nn      =  0.75 - 1.27 * log10(work[r]);
      f1      =  (lpr + cc)/(nn - 0.14 * (lpr + cc));
      work[r] =  log10(work[r])/(1 + f1 * f1);
      work[r] =  pow(10.0, work[r]);
      work[r] =  (pr[r] * work[r])/(1 + pr[r]);
    }

    kfwd[49] = khi[0] * work[0];
    kfwd[51] = khi[1] * work[1];
    kfwd[53] = khi[2] * work[2];
    kfwd[55] = khi[3] * work[3];
    kfwd[56] = khi[4] * work[4];
    kfwd[58] = khi[5] * work[5];
    kfwd[62] = khi[6] * work[6];
    kfwd[69] = khi[7] * work[7];
    kfwd[70] = khi[8] * work[8];
    kfwd[71] = khi[9] * work[9];
    kfwd[73] = khi[10] * work[10];
    kfwd[75] = khi[11] * work[11];
    kfwd[82] = khi[12] * work[12];
    kfwd[84] = khi[13] * work[13];
    kfwd[94] = khi[14] * work[14];
    kfwd[130] = khi[15] * work[15];
    kfwd[139] = khi[16] * work[16];
    kfwd[146] = khi[17] * work[17];
    kfwd[157] = khi[18] * work[18];
    kfwd[173] = khi[19] * work[19];

  };
  
  template <class Type>
    void GasKinetics::getNetProductionRates(Type& T, vector<Type>& z, vector<Type>& fz) {

    Type           W;
    Type           rho;
    vector<double> mw = thermo().molecularWeights();
    vector<Type>   C(m_kk,    0.0);
    vector<Type>   kfwd(m_ii, 0.0);
    vector<Type>   krev(m_ii, 0.0);
    vector<Type>   Rfwd(m_ii, 0.0);
    vector<Type>   Rrev(m_ii, 0.0);
    vector<Type>   Rnet(m_ii, 0.0);
    vector<Type>   omega(m_kk,0.0);

    thermo().getMeanMolecularWeightZ(z, W);
    thermo().getDensity(T, W, rho);
    
    for(int k = 0; k < m_kk; ++k) { C[k] = rho * z[k]; }
    updateRateConstants(T, C, kfwd, krev);

    Rfwd[0] = kfwd[0] * C[2] * C[2];
    Rfwd[1] = kfwd[1] * C[1] * C[2];
    Rfwd[2] = kfwd[2] * C[0] * C[2];
    Rfwd[3] = kfwd[3] * C[6] * C[2];
    Rfwd[4] = kfwd[4] * C[7] * C[2];
    Rfwd[5] = kfwd[5] * C[9] * C[2];
    Rfwd[6] = kfwd[6] * C[10] * C[2];
    Rfwd[7] = kfwd[7] * C[11] * C[2];
    Rfwd[8] = kfwd[8] * C[11] * C[2];
    Rfwd[9] = kfwd[9] * C[12] * C[2];
    Rfwd[10] = kfwd[10] * C[13] * C[2];
    Rfwd[11] = kfwd[11] * C[14] * C[2];
    Rfwd[12] = kfwd[12] * C[16] * C[2];
    Rfwd[13] = kfwd[13] * C[16] * C[2];
    Rfwd[14] = kfwd[14] * C[17] * C[2];
    Rfwd[15] = kfwd[15] * C[18] * C[2];
    Rfwd[16] = kfwd[16] * C[19] * C[2];
    Rfwd[17] = kfwd[17] * C[20] * C[2];
    Rfwd[18] = kfwd[18] * C[20] * C[2];
    Rfwd[19] = kfwd[19] * C[21] * C[2];
    Rfwd[20] = kfwd[20] * C[22] * C[2];
    Rfwd[21] = kfwd[21] * C[22] * C[2];
    Rfwd[22] = kfwd[22] * C[22] * C[2];
    Rfwd[23] = kfwd[23] * C[23] * C[2];
    Rfwd[24] = kfwd[24] * C[24] * C[2];
    Rfwd[25] = kfwd[25] * C[25] * C[2];
    Rfwd[26] = kfwd[26] * C[26] * C[2];
    Rfwd[27] = kfwd[27] * C[27] * C[2];
    Rfwd[28] = kfwd[28] * C[28] * C[2];
    Rfwd[29] = kfwd[29] * C[28] * C[2];
    Rfwd[30] = kfwd[30] * C[14] * C[3];
    Rfwd[31] = kfwd[31] * C[17] * C[3];
    Rfwd[32] = kfwd[32] * C[1] * C[3];
    Rfwd[33] = kfwd[33] * C[1] * C[3] * C[3];
    Rfwd[34] = kfwd[34] * C[1] * C[5] * C[3];
    Rfwd[35] = kfwd[35] * C[1] * C[30] * C[3];
    Rfwd[36] = kfwd[36] * C[1] * C[31] * C[3];
    Rfwd[37] = kfwd[37] * C[1] * C[3];
    Rfwd[38] = kfwd[38] * C[1] * C[1];
    Rfwd[39] = kfwd[39] * C[0] * C[1] * C[1];
    Rfwd[40] = kfwd[40] * C[1] * C[1] * C[5];
    Rfwd[41] = kfwd[41] * C[1] * C[1] * C[15];
    Rfwd[42] = kfwd[42] * C[1] * C[4];
    Rfwd[43] = kfwd[43] * C[1] * C[6];
    Rfwd[44] = kfwd[44] * C[1] * C[6];
    Rfwd[45] = kfwd[45] * C[1] * C[6];
    Rfwd[46] = kfwd[46] * C[1] * C[7];
    Rfwd[47] = kfwd[47] * C[1] * C[7];
    Rfwd[48] = kfwd[48] * C[1] * C[9];
    Rfwd[49] = kfwd[49] * C[1] * C[10];
    Rfwd[50] = kfwd[50] * C[1] * C[11];
    Rfwd[51] = kfwd[51] * C[1] * C[12];
    Rfwd[52] = kfwd[52] * C[1] * C[13];
    Rfwd[53] = kfwd[53] * C[1] * C[16];
    Rfwd[54] = kfwd[54] * C[1] * C[16];
    Rfwd[55] = kfwd[55] * C[17] * C[1];
    Rfwd[56] = kfwd[56] * C[17] * C[1];
    Rfwd[57] = kfwd[57] * C[17] * C[1];
    Rfwd[58] = kfwd[58] * C[1] * C[18];
    Rfwd[59] = kfwd[59] * C[1] * C[18];
    Rfwd[60] = kfwd[60] * C[1] * C[18];
    Rfwd[61] = kfwd[61] * C[1] * C[18];
    Rfwd[62] = kfwd[62] * C[1] * C[19];
    Rfwd[63] = kfwd[63] * C[1] * C[19];
    Rfwd[64] = kfwd[64] * C[1] * C[19];
    Rfwd[65] = kfwd[65] * C[1] * C[19];
    Rfwd[66] = kfwd[66] * C[1] * C[19];
    Rfwd[67] = kfwd[67] * C[20] * C[1];
    Rfwd[68] = kfwd[68] * C[20] * C[1];
    Rfwd[69] = kfwd[69] * C[1] * C[21];
    Rfwd[70] = kfwd[70] * C[1] * C[22];
    Rfwd[71] = kfwd[71] * C[1] * C[23];
    Rfwd[72] = kfwd[72] * C[1] * C[23];
    Rfwd[73] = kfwd[73] * C[1] * C[24];
    Rfwd[74] = kfwd[74] * C[1] * C[24];
    Rfwd[75] = kfwd[75] * C[1] * C[25];
    Rfwd[76] = kfwd[76] * C[1] * C[25];
    Rfwd[77] = kfwd[77] * C[1] * C[26];
    Rfwd[78] = kfwd[78] * C[1] * C[27];
    Rfwd[79] = kfwd[79] * C[1] * C[28];
    Rfwd[80] = kfwd[80] * C[1] * C[28];
    Rfwd[81] = kfwd[81] * C[1] * C[29];
    Rfwd[82] = kfwd[82] * C[0] * C[14];
    Rfwd[83] = kfwd[83] * C[0] * C[4];
    Rfwd[84] = kfwd[84] * C[4] * C[4];
    Rfwd[85] = kfwd[85] * C[4] * C[4];
    Rfwd[86] = kfwd[86] * C[6] * C[4];
    Rfwd[87] = kfwd[87] * C[7] * C[4];
    Rfwd[88] = kfwd[88] * C[7] * C[4];
    Rfwd[89] = kfwd[89] * C[8] * C[4];
    Rfwd[90] = kfwd[90] * C[9] * C[4];
    Rfwd[91] = kfwd[91] * C[10] * C[4];
    Rfwd[92] = kfwd[92] * C[10] * C[4];
    Rfwd[93] = kfwd[93] * C[11] * C[4];
    Rfwd[94] = kfwd[94] * C[12] * C[4];
    Rfwd[95] = kfwd[95] * C[12] * C[4];
    Rfwd[96] = kfwd[96] * C[12] * C[4];
    Rfwd[97] = kfwd[97] * C[13] * C[4];
    Rfwd[98] = kfwd[98] * C[14] * C[4];
    Rfwd[99] = kfwd[99] * C[16] * C[4];
    Rfwd[100] = kfwd[100] * C[17] * C[4];
    Rfwd[101] = kfwd[101] * C[18] * C[4];
    Rfwd[102] = kfwd[102] * C[19] * C[4];
    Rfwd[103] = kfwd[103] * C[20] * C[4];
    Rfwd[104] = kfwd[104] * C[20] * C[4];
    Rfwd[105] = kfwd[105] * C[21] * C[4];
    Rfwd[106] = kfwd[106] * C[22] * C[4];
    Rfwd[107] = kfwd[107] * C[22] * C[4];
    Rfwd[108] = kfwd[108] * C[22] * C[4];
    Rfwd[109] = kfwd[109] * C[22] * C[4];
    Rfwd[110] = kfwd[110] * C[23] * C[4];
    Rfwd[111] = kfwd[111] * C[24] * C[4];
    Rfwd[112] = kfwd[112] * C[26] * C[4];
    Rfwd[113] = kfwd[113] * C[28] * C[4];
    Rfwd[114] = kfwd[114] * C[6] * C[6];
    Rfwd[115] = kfwd[115] * C[6] * C[6];
    Rfwd[116] = kfwd[116] * C[10] * C[6];
    Rfwd[117] = kfwd[117] * C[12] * C[6];
    Rfwd[118] = kfwd[118] * C[12] * C[6];
    Rfwd[119] = kfwd[119] * C[14] * C[6];
    Rfwd[120] = kfwd[120] * C[17] * C[6];
    Rfwd[121] = kfwd[121] * C[8] * C[3];
    Rfwd[122] = kfwd[122] * C[8] * C[10];
    Rfwd[123] = kfwd[123] * C[8] * C[12];
    Rfwd[124] = kfwd[124] * C[9] * C[3];
    Rfwd[125] = kfwd[125] * C[0] * C[9];
    Rfwd[126] = kfwd[126] * C[5] * C[9];
    Rfwd[127] = kfwd[127] * C[10] * C[9];
    Rfwd[128] = kfwd[128] * C[12] * C[9];
    Rfwd[129] = kfwd[129] * C[9] * C[13];
    Rfwd[130] = kfwd[130] * C[9] * C[14];
    Rfwd[131] = kfwd[131] * C[9] * C[15];
    Rfwd[132] = kfwd[132] * C[17] * C[9];
    Rfwd[133] = kfwd[133] * C[9] * C[27];
    Rfwd[134] = kfwd[134] * C[10] * C[3];
    Rfwd[135] = kfwd[135] * C[0] * C[10];
    Rfwd[136] = kfwd[136] * C[10] * C[10];
    Rfwd[137] = kfwd[137] * C[10] * C[12];
    Rfwd[138] = kfwd[138] * C[10] * C[13];
    Rfwd[139] = kfwd[139] * C[10] * C[14];
    Rfwd[140] = kfwd[140] * C[10] * C[27];
    Rfwd[141] = kfwd[141] * C[11] * C[30];
    Rfwd[142] = kfwd[142] * C[11] * C[31];
    Rfwd[143] = kfwd[143] * C[11] * C[3];
    Rfwd[144] = kfwd[144] * C[11] * C[3];
    Rfwd[145] = kfwd[145] * C[0] * C[11];
    Rfwd[146] = kfwd[146] * C[11] * C[5];
    Rfwd[147] = kfwd[147] * C[11] * C[5];
    Rfwd[148] = kfwd[148] * C[11] * C[12];
    Rfwd[149] = kfwd[149] * C[11] * C[13];
    Rfwd[150] = kfwd[150] * C[11] * C[14];
    Rfwd[151] = kfwd[151] * C[11] * C[15];
    Rfwd[152] = kfwd[152] * C[11] * C[15];
    Rfwd[153] = kfwd[153] * C[11] * C[26];
    Rfwd[154] = kfwd[154] * C[12] * C[3];
    Rfwd[155] = kfwd[155] * C[12] * C[3];
    Rfwd[156] = kfwd[156] * C[12] * C[7];
    Rfwd[157] = kfwd[157] * C[12] * C[12];
    Rfwd[158] = kfwd[158] * C[12] * C[12];
    Rfwd[159] = kfwd[159] * C[12] * C[16];
    Rfwd[160] = kfwd[160] * C[17] * C[12];
    Rfwd[161] = kfwd[161] * C[20] * C[12];
    Rfwd[162] = kfwd[162] * C[20] * C[12];
    Rfwd[163] = kfwd[163] * C[12] * C[24];
    Rfwd[164] = kfwd[164] * C[26] * C[12];
    Rfwd[165] = kfwd[165] * C[5] * C[16];
    Rfwd[166] = kfwd[166] * C[16];
    Rfwd[167] = kfwd[167] * C[16] * C[3];
    Rfwd[168] = kfwd[168] * C[18] * C[3];
    Rfwd[169] = kfwd[169] * C[19] * C[3];
    Rfwd[170] = kfwd[170] * C[21] * C[3];
    Rfwd[171] = kfwd[171] * C[0] * C[21];
    Rfwd[172] = kfwd[172] * C[23] * C[3];
    Rfwd[173] = kfwd[173] * C[24];
    Rfwd[174] = kfwd[174] * C[25] * C[3];
    Rfwd[175] = kfwd[175] * C[27] * C[3];
    Rfwd[176] = kfwd[176] * C[27] * C[27];

    Rrev[0] = krev[0] * C[3];
    Rrev[1] = krev[1] * C[4];
    Rrev[2] = krev[2] * C[1] * C[4];
    Rrev[3] = krev[3] * C[3] * C[4];
    Rrev[4] = krev[4] * C[6] * C[4];
    Rrev[5] = krev[5] * C[1] * C[14];
    Rrev[6] = krev[6] * C[1] * C[16];
    Rrev[7] = krev[7] * C[0] * C[14];
    Rrev[8] = krev[8] * C[1] * C[16];
    Rrev[9] = krev[9] * C[17] * C[1];
    Rrev[10] = krev[10] * C[12] * C[4];
    Rrev[11] = krev[11] * C[15];
    Rrev[12] = krev[12] * C[14] * C[4];
    Rrev[13] = krev[13] * C[1] * C[15];
    Rrev[14] = krev[14] * C[16] * C[4];
    Rrev[15] = krev[15] * C[17] * C[4];
    Rrev[16] = krev[16] * C[17] * C[4];
    Rrev[17] = krev[17] * C[18] * C[4];
    Rrev[18] = krev[18] * C[19] * C[4];
    Rrev[19] = krev[19] * C[9] * C[14];
    Rrev[20] = krev[20] * C[1] * C[27];
    Rrev[21] = krev[21] * C[21] * C[4];
    Rrev[22] = krev[22] * C[10] * C[14];
    Rrev[23] = krev[23] * C[1] * C[28];
    Rrev[24] = krev[24] * C[12] * C[16];
    Rrev[25] = krev[25] * C[17] * C[12];
    Rrev[26] = krev[26] * C[25] * C[4];
    Rrev[27] = krev[27] * C[1] * C[14] * C[14];
    Rrev[28] = krev[28] * C[27] * C[4];
    Rrev[29] = krev[29] * C[10] * C[15];
    Rrev[30] = krev[30] * C[15] * C[2];
    Rrev[31] = krev[31] * C[6] * C[16];
    Rrev[32] = krev[32] * C[6];
    Rrev[33] = krev[33] * C[6] * C[3];
    Rrev[34] = krev[34] * C[5] * C[6];
    Rrev[35] = krev[35] * C[30] * C[6];
    Rrev[36] = krev[36] * C[31] * C[6];
    Rrev[37] = krev[37] * C[2] * C[4];
    Rrev[38] = krev[38] * C[0];
    Rrev[39] = krev[39] * C[0] * C[0];
    Rrev[40] = krev[40] * C[0] * C[5];
    Rrev[41] = krev[41] * C[0] * C[15];
    Rrev[42] = krev[42] * C[5];
    Rrev[43] = krev[43] * C[5] * C[2];
    Rrev[44] = krev[44] * C[0] * C[3];
    Rrev[45] = krev[45] * C[4] * C[4];
    Rrev[46] = krev[46] * C[0] * C[6];
    Rrev[47] = krev[47] * C[5] * C[4];
    Rrev[48] = krev[48] * C[0] * C[8];
    Rrev[49] = krev[49] * C[12];
    Rrev[50] = krev[50] * C[0] * C[9];
    Rrev[51] = krev[51] * C[13];
    Rrev[52] = krev[52] * C[0] * C[12];
    Rrev[53] = krev[53] * C[17];
    Rrev[54] = krev[54] * C[0] * C[14];
    Rrev[55] = krev[55] * C[18];
    Rrev[56] = krev[56] * C[19];
    Rrev[57] = krev[57] * C[0] * C[16];
    Rrev[58] = krev[58] * C[20];
    Rrev[59] = krev[59] * C[0] * C[17];
    Rrev[60] = krev[60] * C[12] * C[4];
    Rrev[61] = krev[61] * C[11] * C[5];
    Rrev[62] = krev[62] * C[20];
    Rrev[63] = krev[63] * C[1] * C[18];
    Rrev[64] = krev[64] * C[0] * C[17];
    Rrev[65] = krev[65] * C[12] * C[4];
    Rrev[66] = krev[66] * C[11] * C[5];
    Rrev[67] = krev[67] * C[0] * C[18];
    Rrev[68] = krev[68] * C[0] * C[19];
    Rrev[69] = krev[69] * C[22];
    Rrev[70] = krev[70] * C[23];
    Rrev[71] = krev[71] * C[24];
    Rrev[72] = krev[72] * C[0] * C[22];
    Rrev[73] = krev[73] * C[25];
    Rrev[74] = krev[74] * C[0] * C[23];
    Rrev[75] = krev[75] * C[26];
    Rrev[76] = krev[76] * C[0] * C[24];
    Rrev[77] = krev[77] * C[0] * C[25];
    Rrev[78] = krev[78] * C[11] * C[14];
    Rrev[79] = krev[79] * C[0] * C[27];
    Rrev[80] = krev[80] * C[12] * C[14];
    Rrev[81] = krev[81] * C[1] * C[28];
    Rrev[82] = krev[82] * C[17];
    Rrev[83] = krev[83] * C[1] * C[5];
    Rrev[84] = krev[84] * C[7];
    Rrev[85] = krev[85] * C[5] * C[2];
    Rrev[86] = krev[86] * C[5] * C[3];
    Rrev[87] = krev[87] * C[5] * C[6];
    Rrev[88] = krev[88] * C[5] * C[6];
    Rrev[89] = krev[89] * C[1] * C[14];
    Rrev[90] = krev[90] * C[1] * C[16];
    Rrev[91] = krev[91] * C[17] * C[1];
    Rrev[92] = krev[92] * C[5] * C[9];
    Rrev[93] = krev[93] * C[17] * C[1];
    Rrev[94] = krev[94] * C[20];
    Rrev[95] = krev[95] * C[10] * C[5];
    Rrev[96] = krev[96] * C[11] * C[5];
    Rrev[97] = krev[97] * C[5] * C[12];
    Rrev[98] = krev[98] * C[1] * C[15];
    Rrev[99] = krev[99] * C[5] * C[14];
    Rrev[100] = krev[100] * C[5] * C[16];
    Rrev[101] = krev[101] * C[17] * C[5];
    Rrev[102] = krev[102] * C[17] * C[5];
    Rrev[103] = krev[103] * C[18] * C[5];
    Rrev[104] = krev[104] * C[5] * C[19];
    Rrev[105] = krev[105] * C[1] * C[27];
    Rrev[106] = krev[106] * C[1] * C[28];
    Rrev[107] = krev[107] * C[1] * C[29];
    Rrev[108] = krev[108] * C[21] * C[5];
    Rrev[109] = krev[109] * C[12] * C[14];
    Rrev[110] = krev[110] * C[5] * C[22];
    Rrev[111] = krev[111] * C[5] * C[23];
    Rrev[112] = krev[112] * C[25] * C[5];
    Rrev[113] = krev[113] * C[5] * C[27];
    Rrev[114] = krev[114] * C[3] * C[7];
    Rrev[115] = krev[115] * C[3] * C[7];
    Rrev[116] = krev[116] * C[17] * C[4];
    Rrev[117] = krev[117] * C[13] * C[3];
    Rrev[118] = krev[118] * C[19] * C[4];
    Rrev[119] = krev[119] * C[15] * C[4];
    Rrev[120] = krev[120] * C[16] * C[7];
    Rrev[121] = krev[121] * C[14] * C[2];
    Rrev[122] = krev[122] * C[1] * C[21];
    Rrev[123] = krev[123] * C[1] * C[22];
    Rrev[124] = krev[124] * C[16] * C[2];
    Rrev[125] = krev[125] * C[1] * C[10];
    Rrev[126] = krev[126] * C[17] * C[1];
    Rrev[127] = krev[127] * C[1] * C[22];
    Rrev[128] = krev[128] * C[1] * C[23];
    Rrev[129] = krev[129] * C[1] * C[24];
    Rrev[130] = krev[130] * C[27];
    Rrev[131] = krev[131] * C[14] * C[16];
    Rrev[132] = krev[132] * C[1] * C[28];
    Rrev[133] = krev[133] * C[14] * C[22];
    Rrev[134] = krev[134] * C[16] * C[4];
    Rrev[135] = krev[135] * C[1] * C[12];
    Rrev[136] = krev[136] * C[0] * C[22];
    Rrev[137] = krev[137] * C[1] * C[24];
    Rrev[138] = krev[138] * C[12] * C[12];
    Rrev[139] = krev[139] * C[28];
    Rrev[140] = krev[140] * C[14] * C[23];
    Rrev[141] = krev[141] * C[10] * C[30];
    Rrev[142] = krev[142] * C[10] * C[31];
    Rrev[143] = krev[143] * C[1] * C[14] * C[4];
    Rrev[144] = krev[144] * C[5] * C[14];
    Rrev[145] = krev[145] * C[1] * C[12];
    Rrev[146] = krev[146] * C[20];
    Rrev[147] = krev[147] * C[10] * C[5];
    Rrev[148] = krev[148] * C[1] * C[24];
    Rrev[149] = krev[149] * C[12] * C[12];
    Rrev[150] = krev[150] * C[10] * C[14];
    Rrev[151] = krev[151] * C[10] * C[15];
    Rrev[152] = krev[152] * C[17] * C[14];
    Rrev[153] = krev[153] * C[25] * C[12];
    Rrev[154] = krev[154] * C[19] * C[2];
    Rrev[155] = krev[155] * C[17] * C[4];
    Rrev[156] = krev[156] * C[13] * C[6];
    Rrev[157] = krev[157] * C[26];
    Rrev[158] = krev[158] * C[1] * C[25];
    Rrev[159] = krev[159] * C[14] * C[13];
    Rrev[160] = krev[160] * C[13] * C[16];
    Rrev[161] = krev[161] * C[18] * C[13];
    Rrev[162] = krev[162] * C[19] * C[13];
    Rrev[163] = krev[163] * C[13] * C[23];
    Rrev[164] = krev[164] * C[25] * C[13];
    Rrev[165] = krev[165] * C[1] * C[5] * C[14];
    Rrev[166] = krev[166] * C[1] * C[14];
    Rrev[167] = krev[167] * C[14] * C[6];
    Rrev[168] = krev[168] * C[17] * C[6];
    Rrev[169] = krev[169] * C[17] * C[6];
    Rrev[170] = krev[170] * C[14] * C[16];
    Rrev[171] = krev[171] * C[1] * C[22];
    Rrev[172] = krev[172] * C[17] * C[16];
    Rrev[173] = krev[173] * C[0] * C[22];
    Rrev[174] = krev[174] * C[24] * C[6];
    Rrev[175] = krev[175] * C[14] * C[14] * C[4];
    Rrev[176] = krev[176] * C[14] * C[14] * C[22];
    
    for(int i = 0; i < m_ii; ++i) { Rnet[i] = Rfwd[i] - Rrev[i]; }

    omega[0] =  + Rnet[38] + Rnet[7] + Rnet[39] + Rnet[39] + Rnet[40] + Rnet[41] + Rnet[44]
      + Rnet[46] + Rnet[48] + Rnet[50] + Rnet[52] + Rnet[54] + Rnet[57] + Rnet[59]
      + Rnet[64] + Rnet[67] + Rnet[68] + Rnet[72] + Rnet[74] + Rnet[76] + Rnet[77]
      + Rnet[79] + Rnet[136] + Rnet[173] - Rnet[2] - Rnet[82] - Rnet[83] - Rnet[125]
      - Rnet[135] - Rnet[145] - Rnet[171] - Rnet[39] ;
    omega[1] =  + Rnet[2] + Rnet[5] + Rnet[6] + Rnet[8] + Rnet[9] + Rnet[13] + Rnet[20]
      + Rnet[23] + Rnet[63] + Rnet[81] + Rnet[83] + Rnet[89] + Rnet[90] + Rnet[91]
      + Rnet[93] + Rnet[98] + Rnet[105] + Rnet[106] + Rnet[107] + Rnet[122] +
      Rnet[123] + Rnet[125] + Rnet[126] + Rnet[127] + Rnet[128] + Rnet[129] +
      Rnet[132] + Rnet[135] + Rnet[137] + Rnet[145] + Rnet[148] + Rnet[158] +
      Rnet[166] + Rnet[171] + Rnet[27] + Rnet[143] + Rnet[165] - Rnet[1] - Rnet[32]
      - Rnet[37] - Rnet[38] - Rnet[38] - Rnet[42] - Rnet[43] - Rnet[44] - Rnet[45]
      - Rnet[46] - Rnet[47] - Rnet[48] - Rnet[49] - Rnet[50] - Rnet[51] - Rnet[52]
      - Rnet[53] - Rnet[54] - Rnet[55] - Rnet[56] - Rnet[57] - Rnet[58] - Rnet[59]
      - Rnet[60] - Rnet[61] - Rnet[62] - Rnet[63] - Rnet[64] - Rnet[65] - Rnet[66]
      - Rnet[67] - Rnet[68] - Rnet[69] - Rnet[70] - Rnet[71] - Rnet[72] - Rnet[73]
      - Rnet[74] - Rnet[75] - Rnet[76] - Rnet[77] - Rnet[78] - Rnet[79] - Rnet[80]
      - Rnet[81] - Rnet[33] - Rnet[34] - Rnet[35] - Rnet[36] - Rnet[39] - Rnet[39]
      - Rnet[40] - Rnet[40] - Rnet[41] - Rnet[41] ;
    omega[2] =  + Rnet[30] + Rnet[37] + Rnet[43] + Rnet[85] + Rnet[121] + Rnet[124] +
      Rnet[154] - Rnet[0] - Rnet[0] - Rnet[1] - Rnet[2] - Rnet[3] - Rnet[4] -
      Rnet[5] - Rnet[6] - Rnet[7] - Rnet[8] - Rnet[9] - Rnet[10] - Rnet[11] -
      Rnet[12] - Rnet[13] - Rnet[14] - Rnet[15] - Rnet[16] - Rnet[17] - Rnet[18]
      - Rnet[19] - Rnet[20] - Rnet[21] - Rnet[22] - Rnet[23] - Rnet[24] - Rnet[25]
      - Rnet[26] - Rnet[27] - Rnet[28] - Rnet[29] ;
    omega[3] =  + Rnet[0] + Rnet[3] + Rnet[33] + Rnet[44] + Rnet[86] + Rnet[114] + Rnet[115]
      + Rnet[117] - Rnet[30] - Rnet[31] - Rnet[32] - Rnet[37] - Rnet[121] - Rnet[124]
      - Rnet[134] - Rnet[143] - Rnet[144] - Rnet[154] - Rnet[155] - Rnet[167]
      - Rnet[168] - Rnet[169] - Rnet[170] - Rnet[172] - Rnet[174] - Rnet[175]
      - Rnet[33] - Rnet[33] - Rnet[34] - Rnet[35] - Rnet[36] ;
    omega[4] =  + Rnet[1] + Rnet[2] + Rnet[3] + Rnet[4] + Rnet[10] + Rnet[12] + Rnet[14]
      + Rnet[15] + Rnet[16] + Rnet[17] + Rnet[18] + Rnet[21] + Rnet[26] + Rnet[28]
      + Rnet[37] + Rnet[45] + Rnet[45] + Rnet[47] + Rnet[60] + Rnet[65] + Rnet[116]
      + Rnet[118] + Rnet[119] + Rnet[134] + Rnet[155] + Rnet[143] + Rnet[175]
      - Rnet[42] - Rnet[83] - Rnet[84] - Rnet[84] - Rnet[85] - Rnet[85] - Rnet[86]
      - Rnet[87] - Rnet[88] - Rnet[89] - Rnet[90] - Rnet[91] - Rnet[92] - Rnet[93]
      - Rnet[94] - Rnet[95] - Rnet[96] - Rnet[97] - Rnet[98] - Rnet[99] - Rnet[100]
      - Rnet[101] - Rnet[102] - Rnet[103] - Rnet[104] - Rnet[105] - Rnet[106]
      - Rnet[107] - Rnet[108] - Rnet[109] - Rnet[110] - Rnet[111] - Rnet[112]
      - Rnet[113] ;
    omega[5] =  + Rnet[42] + Rnet[34] + Rnet[40] + Rnet[43] + Rnet[47] + Rnet[61] + Rnet[66]
      + Rnet[83] + Rnet[85] + Rnet[86] + Rnet[87] + Rnet[88] + Rnet[92] + Rnet[95]
      + Rnet[96] + Rnet[97] + Rnet[99] + Rnet[100] + Rnet[101] + Rnet[102] +
      Rnet[103] + Rnet[104] + Rnet[108] + Rnet[110] + Rnet[111] + Rnet[112] +
      Rnet[113] + Rnet[144] + Rnet[147] + Rnet[165] - Rnet[126] - Rnet[146] -
      Rnet[147] - Rnet[165] - Rnet[34] - Rnet[40] ;
    omega[6] =  + Rnet[32] + Rnet[4] + Rnet[31] + Rnet[33] + Rnet[34] + Rnet[35] + Rnet[36]
      + Rnet[46] + Rnet[87] + Rnet[88] + Rnet[156] + Rnet[167] + Rnet[168] +
      Rnet[169] + Rnet[174] - Rnet[3] - Rnet[43] - Rnet[44] - Rnet[45] - Rnet[86]
      - Rnet[114] - Rnet[114] - Rnet[115] - Rnet[115] - Rnet[116] - Rnet[117]
      - Rnet[118] - Rnet[119] - Rnet[120] ;
    omega[7] =  + Rnet[84] + Rnet[114] + Rnet[115] + Rnet[120] - Rnet[4] - Rnet[46] -
      Rnet[47] - Rnet[87] - Rnet[88] - Rnet[156] ;
    omega[8] =  + Rnet[48] - Rnet[89] - Rnet[121] - Rnet[122] - Rnet[123] ;
    omega[9] =  + Rnet[19] + Rnet[50] + Rnet[92] - Rnet[5] - Rnet[48] - Rnet[90] - Rnet[124]
      - Rnet[125] - Rnet[126] - Rnet[127] - Rnet[128] - Rnet[129] - Rnet[130]
      - Rnet[131] - Rnet[132] - Rnet[133] ;
    omega[10] =  + Rnet[22] + Rnet[29] + Rnet[95] + Rnet[125] + Rnet[141] + Rnet[142] +
      Rnet[147] + Rnet[150] + Rnet[151] - Rnet[6] - Rnet[49] - Rnet[91] - Rnet[92]
      - Rnet[116] - Rnet[122] - Rnet[127] - Rnet[134] - Rnet[135] - Rnet[136]
      - Rnet[136] - Rnet[137] - Rnet[138] - Rnet[139] - Rnet[140] ;
    omega[11] =  + Rnet[61] + Rnet[66] + Rnet[78] + Rnet[96] - Rnet[7] - Rnet[8] - Rnet[50]
      - Rnet[93] - Rnet[141] - Rnet[142] - Rnet[143] - Rnet[144] - Rnet[145]
      - Rnet[146] - Rnet[147] - Rnet[148] - Rnet[149] - Rnet[150] - Rnet[151]
      - Rnet[152] - Rnet[153] ;
    omega[12] =  + Rnet[49] + Rnet[10] + Rnet[24] + Rnet[25] + Rnet[52] + Rnet[60] + Rnet[65]
      + Rnet[80] + Rnet[97] + Rnet[109] + Rnet[135] + Rnet[138] + Rnet[138] +
      Rnet[145] + Rnet[149] + Rnet[149] + Rnet[153] - Rnet[9] - Rnet[51] - Rnet[94]
      - Rnet[95] - Rnet[96] - Rnet[117] - Rnet[118] - Rnet[123] - Rnet[128] -
      Rnet[137] - Rnet[148] - Rnet[154] - Rnet[155] - Rnet[156] - Rnet[157] -
      Rnet[157] - Rnet[158] - Rnet[158] - Rnet[159] - Rnet[160] - Rnet[161] -
      Rnet[162] - Rnet[163] - Rnet[164] ;
    omega[13] =  + Rnet[51] + Rnet[117] + Rnet[156] + Rnet[159] + Rnet[160] + Rnet[161]
      + Rnet[162] + Rnet[163] + Rnet[164] - Rnet[10] - Rnet[52] - Rnet[97] -
      Rnet[129] - Rnet[138] - Rnet[149] ;
    omega[14] =  + Rnet[5] + Rnet[7] + Rnet[12] + Rnet[19] + Rnet[22] + Rnet[54] + Rnet[78]
      + Rnet[80] + Rnet[89] + Rnet[99] + Rnet[109] + Rnet[121] + Rnet[131] +
      Rnet[133] + Rnet[140] + Rnet[144] + Rnet[150] + Rnet[152] + Rnet[159] +
      Rnet[166] + Rnet[167] + Rnet[170] + Rnet[27] + Rnet[27] + Rnet[143] + Rnet[165]
      + Rnet[175] + Rnet[175] + Rnet[176] + Rnet[176] - Rnet[11] - Rnet[30] -
      Rnet[82] - Rnet[98] - Rnet[119] - Rnet[130] - Rnet[139] - Rnet[150] ;
    omega[15] =  + Rnet[11] + Rnet[13] + Rnet[29] + Rnet[30] + Rnet[41] + Rnet[98] + Rnet[119]
      + Rnet[151] - Rnet[131] - Rnet[151] - Rnet[152] - Rnet[41] ;
    omega[16] =  + Rnet[6] + Rnet[8] + Rnet[14] + Rnet[24] + Rnet[31] + Rnet[57] + Rnet[90]
      + Rnet[100] + Rnet[120] + Rnet[124] + Rnet[131] + Rnet[134] + Rnet[160]
      + Rnet[170] + Rnet[172] - Rnet[166] - Rnet[12] - Rnet[13] - Rnet[53] -
      Rnet[54] - Rnet[99] - Rnet[159] - Rnet[165] - Rnet[167] ;
    omega[17] =  + Rnet[53] + Rnet[82] + Rnet[9] + Rnet[15] + Rnet[16] + Rnet[25] + Rnet[59]
      + Rnet[64] + Rnet[91] + Rnet[93] + Rnet[101] + Rnet[102] + Rnet[116] +
      Rnet[126] + Rnet[152] + Rnet[155] + Rnet[168] + Rnet[169] + Rnet[172] -
      Rnet[14] - Rnet[31] - Rnet[55] - Rnet[56] - Rnet[57] - Rnet[100] - Rnet[120]
      - Rnet[132] - Rnet[160] ;
    omega[18] =  + Rnet[55] + Rnet[17] + Rnet[63] + Rnet[67] + Rnet[103] + Rnet[161] -
      Rnet[15] - Rnet[58] - Rnet[59] - Rnet[60] - Rnet[61] - Rnet[101] - Rnet[168] ;
    omega[19] =  + Rnet[56] + Rnet[18] + Rnet[68] + Rnet[104] + Rnet[118] + Rnet[154] +
      Rnet[162] - Rnet[16] - Rnet[62] - Rnet[63] - Rnet[64] - Rnet[65] - Rnet[66]
      - Rnet[102] - Rnet[169] ;
    omega[20] =  + Rnet[58] + Rnet[62] + Rnet[94] + Rnet[146] - Rnet[17] - Rnet[18] - Rnet[67]
      - Rnet[68] - Rnet[103] - Rnet[104] - Rnet[161] - Rnet[162] ;
    omega[21] =  + Rnet[21] + Rnet[108] + Rnet[122] - Rnet[19] - Rnet[69] - Rnet[105] -
      Rnet[170] - Rnet[171] ;
    omega[22] =  + Rnet[69] + Rnet[72] + Rnet[110] + Rnet[123] + Rnet[127] + Rnet[133]
      + Rnet[136] + Rnet[171] + Rnet[173] + Rnet[176] - Rnet[20] - Rnet[21] -
      Rnet[22] - Rnet[70] - Rnet[106] - Rnet[107] - Rnet[108] - Rnet[109] ;
    omega[23] =  + Rnet[70] + Rnet[74] + Rnet[111] + Rnet[128] + Rnet[140] + Rnet[163]
      - Rnet[23] - Rnet[71] - Rnet[72] - Rnet[110] - Rnet[172] ;
    omega[24] =  + Rnet[71] + Rnet[76] + Rnet[129] + Rnet[137] + Rnet[148] + Rnet[174]
      - Rnet[173] - Rnet[24] - Rnet[73] - Rnet[74] - Rnet[111] - Rnet[163] ;
    omega[25] =  + Rnet[73] + Rnet[26] + Rnet[77] + Rnet[112] + Rnet[153] + Rnet[158] +
      Rnet[164] - Rnet[25] - Rnet[75] - Rnet[76] - Rnet[174] ;
    omega[26] =  + Rnet[75] + Rnet[157] - Rnet[26] - Rnet[77] - Rnet[112] - Rnet[153] -
      Rnet[164] ;
    omega[27] =  + Rnet[130] + Rnet[20] + Rnet[28] + Rnet[79] + Rnet[105] + Rnet[113] -
      Rnet[27] - Rnet[78] - Rnet[133] - Rnet[140] - Rnet[175] - Rnet[176] - Rnet[176] ;
    omega[28] =  + Rnet[139] + Rnet[23] + Rnet[81] + Rnet[106] + Rnet[132] - Rnet[28] -
      Rnet[29] - Rnet[79] - Rnet[80] - Rnet[113] ;
    omega[29] =  + Rnet[107] - Rnet[81] ;
    omega[30] =  + Rnet[35] + Rnet[141] - Rnet[141] - Rnet[35] ;
    omega[31] =  + Rnet[36] + Rnet[142] - Rnet[142] - Rnet[36] ;

    for(int k = 0; k < m_kk; ++k) { fz[k] = omega[k] / rho; }

  };

}
    
#endif
